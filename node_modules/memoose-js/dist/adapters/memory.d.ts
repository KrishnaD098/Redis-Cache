import { CacheKey, CacheProvider, Pipeline } from "./base";
type CacheInternalObj = {
    data: any;
    reject: boolean;
};
declare class CacheObject {
    key: string;
    data: {
        data: any;
        reject: boolean;
    };
    ttl: number;
    constructor(key: string, data: CacheInternalObj, ttl: number);
}
export declare class MemoryCacheProvider implements CacheProvider<CacheInternalObj> {
    private readonly store;
    readonly storesAsObj: boolean;
    constructor();
    pipeline(): Pipeline<CacheInternalObj>;
    name(): string;
    expire(key: string, new_ttl_from_now: number): Promise<0 | 1>;
    del(...keys: string[]): Promise<number>;
    set(key: string, data: CacheInternalObj, ttl: number): Promise<any>;
    get(key: string): Promise<any | null>;
    dump(): Promise<Record<string, CacheObject>>;
    flushdb(): Promise<number>;
    mget(...keys: CacheKey[]): Promise<(any | null)[]>;
    mset(...kvPairs: [CacheKey, CacheInternalObj][]): Promise<"OK" | null>;
}
export {};
